{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/barber.jpg","assets/nico.svg"],"names":["EMAIL","EMAIL_LINK","Content","Layout","Footer","Styles","layout","color","height","padding","textAlign","content","backgroundImage","barber","backgroundPosition","backgroundSize","backgroundRepeat","content__container","position","top","transform","content__button_container","margin","content__book_button","background","display","fontWeight","marginRight","content__instagram_button","marginTop","footer","footer__contact_container","fontSize","footer__link","footer__copyright","App","style","alt","src","logo","width","id","href","target","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2OAWMA,G,MAAQ,wBAIRC,EAAU,iBAAaD,EAAb,8BAIPE,EAAoBC,IAApBD,QAASE,EAAWD,IAAXC,OACZC,EAAQ,CACbC,OAAQ,CACPC,MAAO,QACPC,OAAQ,QACRC,QAAS,EACTC,UAAW,UAEZC,QAAS,CACRC,gBAAgB,4EAAD,OAA8EC,IAA9E,KACfC,mBAAoB,eACpBC,eAAgB,QAChBC,iBAAkB,YAClBR,OAAQ,SAETS,mBAAoB,CACnBC,SAAU,WACVC,IAAK,MACLC,UAAW,oBAEZC,0BAA2B,CAC1BC,OAAQ,QAETC,qBAAsB,CACrBC,WAAY,QACZjB,MAAO,QACPkB,QAAS,WACTC,WAAY,OACZC,YAAa,QAEdC,0BAA2B,CAC1BJ,WAAW,qBACXjB,MAAO,QACPmB,WAAY,OACZG,UAAW,OAEZC,OAAQ,CACPN,WAAY,QACZjB,MAAO,SAERwB,0BAA2B,CAC1BC,SAAU,QAEXC,aAAa,CACZ1B,MAAO,SAER2B,kBAAmB,CAClBF,SAAU,SAuCGG,MAnCf,WACC,OACC,kBAAC,IAAD,CAAQC,MAAO/B,EAAOC,QACrB,kBAACJ,EAAD,CAASkC,MAAO/B,EAAOM,SACtB,yBAAKyB,MAAO/B,EAAOY,oBAClB,yBAAKoB,IAAI,uBAAuBC,IAAKC,IAAMC,MAAO,IAAKhC,OAAQ,MAC/D,yBAAK4B,MAAO/B,EAAOgB,2BAClB,kBAAC,IAAD,CACCoB,GAAG,wBACHC,KAvEkB,0EAwElBC,OAAO,SACPP,MAAO/B,EAAOkB,sBAJf,oBAQA,kBAAC,IAAD,CACCa,MAAO/B,EAAOuB,0BACdc,KA9EgB,sCA+EhBC,OAAO,UAHR,aAIgB,kBAAC,IAAD,CAAMC,KAAK,kBAK9B,kBAACxC,EAAD,CAAQgC,MAAO/B,EAAOyB,QACrB,yBAAKM,MAAO/B,EAAO0B,2BAClB,kBAAC,IAAD,CAAQa,KAAK,OAAOR,MAAO/B,EAAO4B,aAAcS,KAAMzC,EAAY0C,OAAO,QAAQ3C,GADlF,IACkG,kBAAC,IAAD,CAAQ4C,KAAK,OAAOR,MAAO/B,EAAO4B,aAAcS,KAhFnI,oBAgFmF,IApFvF,eAoFuF,KADlG,IACwL,kBAAC,IAAD,CAAQE,KAAK,OAAOR,MAAO/B,EAAO4B,aAAcS,KA/EvN,oEA+E2OC,OAAO,UAA3E,IAnF5K,oBAmF4K,MAExL,6BACA,uBAAGP,MAAO/B,EAAO6B,mBAAjB,gCCvFgBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f6797e84.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Icon, Layout } from \"antd\";\n\nimport barber from \"./assets/barber.jpg\";\nimport logo from \"./assets/nico.svg\";\n\nimport \"antd/dist/antd.css\";\n\nconst BOOK_BUTTON_LiNK = \"https://my.setmore.com/bookingpage/97b6432a-0bcb-4d8b-bfaf-6c7d07d8a0a4\";\nconst INSTAGRAM_LINK = \"https://instagram.com/cervantesnico\";\n\nconst EMAIL = \"nicocerv@hotmail.com\";\nconst NUMBER = \"647-924-6984\";\nconst ADDRESS = \"222 Albert Street\";\n\nconst EMAIL_LINK = `mailto:${EMAIL}?Subject==Barber%20Inquiry`;\nconst PHONE_LINK = \"tel:647-924-6984\";\nconst ADDRESS_LINK = \"https://maps.google.com/maps?q=222+Albert+St,+Waterloo,+ON+N2L3T6\";\n\nconst {  Content, Footer } = Layout;\nconst Styles ={\n\tlayout: {\n\t\tcolor: \"white\",\n\t\theight: \"100vh\",\n\t\tpadding: 0,\n\t\ttextAlign: \"center\",\n\t},\n\tcontent :{\n\t\tbackgroundImage: `linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.9)), url(${barber})`,\n\t\tbackgroundPosition: \"center/cover\",\n\t\tbackgroundSize: \"cover\",\n\t\tbackgroundRepeat: \"no-repeat\",\n\t\theight: \"500px\",\n\t},\n\tcontent__container: {\n\t\tposition: \"relative\",\n\t\ttop: \"50%\",\n\t\ttransform: \"translateY(-50%)\",\n\t},\n\tcontent__button_container: {\n\t\tmargin: \"15px\",\n\t},\n\tcontent__book_button: {\n\t\tbackground: \"black\",\n\t\tcolor: \"white\",\n\t\tdisplay: \"relative\",\n\t\tfontWeight: \"bold\", \n\t\tmarginRight: \"10px\",\n\t},\n\tcontent__instagram_button: {\n\t\tbackground:\"rgb(202, 174, 126)\",\n\t\tcolor: \"white\",\n\t\tfontWeight: \"bold\",\n\t\tmarginTop: \"5px\",\n\t},\n\tfooter: {\n\t\tbackground: \"black\",\n\t\tcolor: \"white\", \n\t},\n\tfooter__contact_container: {\n\t\tfontSize: \"14px\", \n\t},\n\tfooter__link:{\n\t\tcolor: \"white\",\n\t},\n\tfooter__copyright: {\n\t\tfontSize: \"10px\",\n\t}\n};\n\nfunction App() {\n\treturn (\n\t\t<Layout style={Styles.layout}>\n\t\t\t<Content style={Styles.content}>\n\t\t\t\t<div style={Styles.content__container}>\n\t\t\t\t\t<img alt=\"Nico the Barber logo\" src={logo} width={200} height={200} />\n\t\t\t\t\t<div style={Styles.content__button_container}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid=\"Setmore_button_iframe\"\n\t\t\t\t\t\t\thref={BOOK_BUTTON_LiNK}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\tstyle={Styles.content__book_button}>\n                Book Appointment\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t{/* <br/> */}\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={Styles.content__instagram_button}\n\t\t\t\t\t\t\thref={INSTAGRAM_LINK}\n\t\t\t\t\t\t\ttarget=\"_blank\" >\n            Instagram <Icon type=\"instagram\"/>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Content>\n\t\t\t<Footer style={Styles.footer}>\n\t\t\t\t<div style={Styles.footer__contact_container}>\n\t\t\t\t\t<Button type=\"link\" style={Styles.footer__link} href={EMAIL_LINK} target=\"_top\">{EMAIL}</Button>|<Button type=\"link\" style={Styles.footer__link} href={PHONE_LINK}> {NUMBER} </Button>|<Button type=\"link\" style={Styles.footer__link} href={ADDRESS_LINK} target=\"_blank\"> {ADDRESS} </Button>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<p style={Styles.footer__copyright}>Nico the Barber Â© 2020</p>\n\t\t\t</Footer>\n\t\t</Layout>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/barber.18ba50bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nico.9bd6c7d2.svg\";"],"sourceRoot":""}